/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.chamcong.model.impl;

import com.liferay.docs.chamcong.model.GioLam;
import com.liferay.docs.chamcong.model.GioLamModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GioLam service. Represents a row in the &quot;_GioLam&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GioLamModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GioLamImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GioLamImpl
 * @generated
 */
@JSON(strict = true)
public class GioLamModelImpl
	extends BaseModelImpl<GioLam> implements GioLamModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gio lam model instance should use the <code>GioLam</code> interface instead.
	 */
	public static final String TABLE_NAME = "_GioLam";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.INTEGER}, {"user_id", Types.BIGINT},
		{"ngay_lam", Types.TIMESTAMP}, {"ip", Types.VARCHAR},
		{"check_in_sang", Types.TIMESTAMP}, {"check_out_sang", Types.TIMESTAMP},
		{"di_muon_sang", Types.INTEGER}, {"ve_som_sang", Types.INTEGER},
		{"gio_cham_cong_sang", Types.INTEGER},
		{"check_in_chieu", Types.TIMESTAMP},
		{"check_out_chieu", Types.TIMESTAMP}, {"di_muon_chieu", Types.INTEGER},
		{"ve_som_chieu", Types.INTEGER}, {"gio_cham_cong_chieu", Types.INTEGER},
		{"check_in_toi", Types.TIMESTAMP}, {"check_out_toi", Types.TIMESTAMP},
		{"di_muon_toi", Types.INTEGER}, {"ve_som_toi", Types.INTEGER},
		{"diem", Types.DOUBLE}, {"trangthai", Types.INTEGER},
		{"created_at", Types.TIMESTAMP}, {"updated_at", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ngay_lam", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("check_in_sang", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("check_out_sang", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("di_muon_sang", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ve_som_sang", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gio_cham_cong_sang", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("check_in_chieu", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("check_out_chieu", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("di_muon_chieu", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ve_som_chieu", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gio_cham_cong_chieu", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("check_in_toi", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("check_out_toi", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("di_muon_toi", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ve_som_toi", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("diem", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("trangthai", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("created_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated_at", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table _GioLam (id_ INTEGER not null primary key,user_id LONG,ngay_lam DATE null,ip VARCHAR(75) null,check_in_sang DATE null,check_out_sang DATE null,di_muon_sang INTEGER,ve_som_sang INTEGER,gio_cham_cong_sang INTEGER,check_in_chieu DATE null,check_out_chieu DATE null,di_muon_chieu INTEGER,ve_som_chieu INTEGER,gio_cham_cong_chieu INTEGER,check_in_toi DATE null,check_out_toi DATE null,di_muon_toi INTEGER,ve_som_toi INTEGER,diem DOUBLE,trangthai INTEGER,created_at DATE null,updated_at DATE null)";

	public static final String TABLE_SQL_DROP = "drop table _GioLam";

	public static final String ORDER_BY_JPQL = " ORDER BY gioLam.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY _GioLam.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public GioLamModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GioLam.class;
	}

	@Override
	public String getModelClassName() {
		return GioLam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GioLam, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GioLam, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GioLam, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((GioLam)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GioLam, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GioLam, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GioLam)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GioLam, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GioLam, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<GioLam, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GioLam, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GioLam, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<GioLam, Object>>();
		Map<String, BiConsumer<GioLam, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<GioLam, ?>>();

		attributeGetterFunctions.put("id", GioLam::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<GioLam, Integer>)GioLam::setId);
		attributeGetterFunctions.put("user_id", GioLam::getUser_id);
		attributeSetterBiConsumers.put(
			"user_id", (BiConsumer<GioLam, Long>)GioLam::setUser_id);
		attributeGetterFunctions.put("ngay_lam", GioLam::getNgay_lam);
		attributeSetterBiConsumers.put(
			"ngay_lam", (BiConsumer<GioLam, Date>)GioLam::setNgay_lam);
		attributeGetterFunctions.put("ip", GioLam::getIp);
		attributeSetterBiConsumers.put(
			"ip", (BiConsumer<GioLam, String>)GioLam::setIp);
		attributeGetterFunctions.put("check_in_sang", GioLam::getCheck_in_sang);
		attributeSetterBiConsumers.put(
			"check_in_sang",
			(BiConsumer<GioLam, Date>)GioLam::setCheck_in_sang);
		attributeGetterFunctions.put(
			"check_out_sang", GioLam::getCheck_out_sang);
		attributeSetterBiConsumers.put(
			"check_out_sang",
			(BiConsumer<GioLam, Date>)GioLam::setCheck_out_sang);
		attributeGetterFunctions.put("di_muon_sang", GioLam::getDi_muon_sang);
		attributeSetterBiConsumers.put(
			"di_muon_sang",
			(BiConsumer<GioLam, Integer>)GioLam::setDi_muon_sang);
		attributeGetterFunctions.put("ve_som_sang", GioLam::getVe_som_sang);
		attributeSetterBiConsumers.put(
			"ve_som_sang", (BiConsumer<GioLam, Integer>)GioLam::setVe_som_sang);
		attributeGetterFunctions.put(
			"gio_cham_cong_sang", GioLam::getGio_cham_cong_sang);
		attributeSetterBiConsumers.put(
			"gio_cham_cong_sang",
			(BiConsumer<GioLam, Integer>)GioLam::setGio_cham_cong_sang);
		attributeGetterFunctions.put(
			"check_in_chieu", GioLam::getCheck_in_chieu);
		attributeSetterBiConsumers.put(
			"check_in_chieu",
			(BiConsumer<GioLam, Date>)GioLam::setCheck_in_chieu);
		attributeGetterFunctions.put(
			"check_out_chieu", GioLam::getCheck_out_chieu);
		attributeSetterBiConsumers.put(
			"check_out_chieu",
			(BiConsumer<GioLam, Date>)GioLam::setCheck_out_chieu);
		attributeGetterFunctions.put("di_muon_chieu", GioLam::getDi_muon_chieu);
		attributeSetterBiConsumers.put(
			"di_muon_chieu",
			(BiConsumer<GioLam, Integer>)GioLam::setDi_muon_chieu);
		attributeGetterFunctions.put("ve_som_chieu", GioLam::getVe_som_chieu);
		attributeSetterBiConsumers.put(
			"ve_som_chieu",
			(BiConsumer<GioLam, Integer>)GioLam::setVe_som_chieu);
		attributeGetterFunctions.put(
			"gio_cham_cong_chieu", GioLam::getGio_cham_cong_chieu);
		attributeSetterBiConsumers.put(
			"gio_cham_cong_chieu",
			(BiConsumer<GioLam, Integer>)GioLam::setGio_cham_cong_chieu);
		attributeGetterFunctions.put("check_in_toi", GioLam::getCheck_in_toi);
		attributeSetterBiConsumers.put(
			"check_in_toi", (BiConsumer<GioLam, Date>)GioLam::setCheck_in_toi);
		attributeGetterFunctions.put("check_out_toi", GioLam::getCheck_out_toi);
		attributeSetterBiConsumers.put(
			"check_out_toi",
			(BiConsumer<GioLam, Date>)GioLam::setCheck_out_toi);
		attributeGetterFunctions.put("di_muon_toi", GioLam::getDi_muon_toi);
		attributeSetterBiConsumers.put(
			"di_muon_toi", (BiConsumer<GioLam, Integer>)GioLam::setDi_muon_toi);
		attributeGetterFunctions.put("ve_som_toi", GioLam::getVe_som_toi);
		attributeSetterBiConsumers.put(
			"ve_som_toi", (BiConsumer<GioLam, Integer>)GioLam::setVe_som_toi);
		attributeGetterFunctions.put("diem", GioLam::getDiem);
		attributeSetterBiConsumers.put(
			"diem", (BiConsumer<GioLam, Double>)GioLam::setDiem);
		attributeGetterFunctions.put("trangthai", GioLam::getTrangthai);
		attributeSetterBiConsumers.put(
			"trangthai", (BiConsumer<GioLam, Integer>)GioLam::setTrangthai);
		attributeGetterFunctions.put("created_at", GioLam::getCreated_at);
		attributeSetterBiConsumers.put(
			"created_at", (BiConsumer<GioLam, Date>)GioLam::setCreated_at);
		attributeGetterFunctions.put("updated_at", GioLam::getUpdated_at);
		attributeSetterBiConsumers.put(
			"updated_at", (BiConsumer<GioLam, Date>)GioLam::setUpdated_at);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalId() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("id_"));
	}

	@JSON
	@Override
	public long getUser_id() {
		return _user_id;
	}

	@Override
	public void setUser_id(long user_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_user_id = user_id;
	}

	@JSON
	@Override
	public Date getNgay_lam() {
		return _ngay_lam;
	}

	@Override
	public void setNgay_lam(Date ngay_lam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ngay_lam = ngay_lam;
	}

	@JSON
	@Override
	public String getIp() {
		if (_ip == null) {
			return "";
		}
		else {
			return _ip;
		}
	}

	@Override
	public void setIp(String ip) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ip = ip;
	}

	@JSON
	@Override
	public Date getCheck_in_sang() {
		return _check_in_sang;
	}

	@Override
	public void setCheck_in_sang(Date check_in_sang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_check_in_sang = check_in_sang;
	}

	@JSON
	@Override
	public Date getCheck_out_sang() {
		return _check_out_sang;
	}

	@Override
	public void setCheck_out_sang(Date check_out_sang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_check_out_sang = check_out_sang;
	}

	@JSON
	@Override
	public int getDi_muon_sang() {
		return _di_muon_sang;
	}

	@Override
	public void setDi_muon_sang(int di_muon_sang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_di_muon_sang = di_muon_sang;
	}

	@JSON
	@Override
	public int getVe_som_sang() {
		return _ve_som_sang;
	}

	@Override
	public void setVe_som_sang(int ve_som_sang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ve_som_sang = ve_som_sang;
	}

	@JSON
	@Override
	public int getGio_cham_cong_sang() {
		return _gio_cham_cong_sang;
	}

	@Override
	public void setGio_cham_cong_sang(int gio_cham_cong_sang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gio_cham_cong_sang = gio_cham_cong_sang;
	}

	@JSON
	@Override
	public Date getCheck_in_chieu() {
		return _check_in_chieu;
	}

	@Override
	public void setCheck_in_chieu(Date check_in_chieu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_check_in_chieu = check_in_chieu;
	}

	@JSON
	@Override
	public Date getCheck_out_chieu() {
		return _check_out_chieu;
	}

	@Override
	public void setCheck_out_chieu(Date check_out_chieu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_check_out_chieu = check_out_chieu;
	}

	@JSON
	@Override
	public int getDi_muon_chieu() {
		return _di_muon_chieu;
	}

	@Override
	public void setDi_muon_chieu(int di_muon_chieu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_di_muon_chieu = di_muon_chieu;
	}

	@JSON
	@Override
	public int getVe_som_chieu() {
		return _ve_som_chieu;
	}

	@Override
	public void setVe_som_chieu(int ve_som_chieu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ve_som_chieu = ve_som_chieu;
	}

	@JSON
	@Override
	public int getGio_cham_cong_chieu() {
		return _gio_cham_cong_chieu;
	}

	@Override
	public void setGio_cham_cong_chieu(int gio_cham_cong_chieu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gio_cham_cong_chieu = gio_cham_cong_chieu;
	}

	@JSON
	@Override
	public Date getCheck_in_toi() {
		return _check_in_toi;
	}

	@Override
	public void setCheck_in_toi(Date check_in_toi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_check_in_toi = check_in_toi;
	}

	@JSON
	@Override
	public Date getCheck_out_toi() {
		return _check_out_toi;
	}

	@Override
	public void setCheck_out_toi(Date check_out_toi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_check_out_toi = check_out_toi;
	}

	@JSON
	@Override
	public int getDi_muon_toi() {
		return _di_muon_toi;
	}

	@Override
	public void setDi_muon_toi(int di_muon_toi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_di_muon_toi = di_muon_toi;
	}

	@JSON
	@Override
	public int getVe_som_toi() {
		return _ve_som_toi;
	}

	@Override
	public void setVe_som_toi(int ve_som_toi) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ve_som_toi = ve_som_toi;
	}

	@JSON
	@Override
	public double getDiem() {
		return _diem;
	}

	@Override
	public void setDiem(double diem) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_diem = diem;
	}

	@JSON
	@Override
	public int getTrangthai() {
		return _trangthai;
	}

	@Override
	public void setTrangthai(int trangthai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangthai = trangthai;
	}

	@JSON
	@Override
	public Date getCreated_at() {
		return _created_at;
	}

	@Override
	public void setCreated_at(Date created_at) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_created_at = created_at;
	}

	@JSON
	@Override
	public Date getUpdated_at() {
		return _updated_at;
	}

	@Override
	public void setUpdated_at(Date updated_at) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updated_at = updated_at;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public GioLam toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GioLam>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GioLamImpl gioLamImpl = new GioLamImpl();

		gioLamImpl.setId(getId());
		gioLamImpl.setUser_id(getUser_id());
		gioLamImpl.setNgay_lam(getNgay_lam());
		gioLamImpl.setIp(getIp());
		gioLamImpl.setCheck_in_sang(getCheck_in_sang());
		gioLamImpl.setCheck_out_sang(getCheck_out_sang());
		gioLamImpl.setDi_muon_sang(getDi_muon_sang());
		gioLamImpl.setVe_som_sang(getVe_som_sang());
		gioLamImpl.setGio_cham_cong_sang(getGio_cham_cong_sang());
		gioLamImpl.setCheck_in_chieu(getCheck_in_chieu());
		gioLamImpl.setCheck_out_chieu(getCheck_out_chieu());
		gioLamImpl.setDi_muon_chieu(getDi_muon_chieu());
		gioLamImpl.setVe_som_chieu(getVe_som_chieu());
		gioLamImpl.setGio_cham_cong_chieu(getGio_cham_cong_chieu());
		gioLamImpl.setCheck_in_toi(getCheck_in_toi());
		gioLamImpl.setCheck_out_toi(getCheck_out_toi());
		gioLamImpl.setDi_muon_toi(getDi_muon_toi());
		gioLamImpl.setVe_som_toi(getVe_som_toi());
		gioLamImpl.setDiem(getDiem());
		gioLamImpl.setTrangthai(getTrangthai());
		gioLamImpl.setCreated_at(getCreated_at());
		gioLamImpl.setUpdated_at(getUpdated_at());

		gioLamImpl.resetOriginalValues();

		return gioLamImpl;
	}

	@Override
	public GioLam cloneWithOriginalValues() {
		GioLamImpl gioLamImpl = new GioLamImpl();

		gioLamImpl.setId(this.<Integer>getColumnOriginalValue("id_"));
		gioLamImpl.setUser_id(this.<Long>getColumnOriginalValue("user_id"));
		gioLamImpl.setNgay_lam(this.<Date>getColumnOriginalValue("ngay_lam"));
		gioLamImpl.setIp(this.<String>getColumnOriginalValue("ip"));
		gioLamImpl.setCheck_in_sang(
			this.<Date>getColumnOriginalValue("check_in_sang"));
		gioLamImpl.setCheck_out_sang(
			this.<Date>getColumnOriginalValue("check_out_sang"));
		gioLamImpl.setDi_muon_sang(
			this.<Integer>getColumnOriginalValue("di_muon_sang"));
		gioLamImpl.setVe_som_sang(
			this.<Integer>getColumnOriginalValue("ve_som_sang"));
		gioLamImpl.setGio_cham_cong_sang(
			this.<Integer>getColumnOriginalValue("gio_cham_cong_sang"));
		gioLamImpl.setCheck_in_chieu(
			this.<Date>getColumnOriginalValue("check_in_chieu"));
		gioLamImpl.setCheck_out_chieu(
			this.<Date>getColumnOriginalValue("check_out_chieu"));
		gioLamImpl.setDi_muon_chieu(
			this.<Integer>getColumnOriginalValue("di_muon_chieu"));
		gioLamImpl.setVe_som_chieu(
			this.<Integer>getColumnOriginalValue("ve_som_chieu"));
		gioLamImpl.setGio_cham_cong_chieu(
			this.<Integer>getColumnOriginalValue("gio_cham_cong_chieu"));
		gioLamImpl.setCheck_in_toi(
			this.<Date>getColumnOriginalValue("check_in_toi"));
		gioLamImpl.setCheck_out_toi(
			this.<Date>getColumnOriginalValue("check_out_toi"));
		gioLamImpl.setDi_muon_toi(
			this.<Integer>getColumnOriginalValue("di_muon_toi"));
		gioLamImpl.setVe_som_toi(
			this.<Integer>getColumnOriginalValue("ve_som_toi"));
		gioLamImpl.setDiem(this.<Double>getColumnOriginalValue("diem"));
		gioLamImpl.setTrangthai(
			this.<Integer>getColumnOriginalValue("trangthai"));
		gioLamImpl.setCreated_at(
			this.<Date>getColumnOriginalValue("created_at"));
		gioLamImpl.setUpdated_at(
			this.<Date>getColumnOriginalValue("updated_at"));

		return gioLamImpl;
	}

	@Override
	public int compareTo(GioLam gioLam) {
		int primaryKey = gioLam.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof GioLam)) {
			return false;
		}

		GioLam gioLam = (GioLam)object;

		int primaryKey = gioLam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<GioLam> toCacheModel() {
		GioLamCacheModel gioLamCacheModel = new GioLamCacheModel();

		gioLamCacheModel.id = getId();

		gioLamCacheModel.user_id = getUser_id();

		Date ngay_lam = getNgay_lam();

		if (ngay_lam != null) {
			gioLamCacheModel.ngay_lam = ngay_lam.getTime();
		}
		else {
			gioLamCacheModel.ngay_lam = Long.MIN_VALUE;
		}

		gioLamCacheModel.ip = getIp();

		String ip = gioLamCacheModel.ip;

		if ((ip != null) && (ip.length() == 0)) {
			gioLamCacheModel.ip = null;
		}

		Date check_in_sang = getCheck_in_sang();

		if (check_in_sang != null) {
			gioLamCacheModel.check_in_sang = check_in_sang.getTime();
		}
		else {
			gioLamCacheModel.check_in_sang = Long.MIN_VALUE;
		}

		Date check_out_sang = getCheck_out_sang();

		if (check_out_sang != null) {
			gioLamCacheModel.check_out_sang = check_out_sang.getTime();
		}
		else {
			gioLamCacheModel.check_out_sang = Long.MIN_VALUE;
		}

		gioLamCacheModel.di_muon_sang = getDi_muon_sang();

		gioLamCacheModel.ve_som_sang = getVe_som_sang();

		gioLamCacheModel.gio_cham_cong_sang = getGio_cham_cong_sang();

		Date check_in_chieu = getCheck_in_chieu();

		if (check_in_chieu != null) {
			gioLamCacheModel.check_in_chieu = check_in_chieu.getTime();
		}
		else {
			gioLamCacheModel.check_in_chieu = Long.MIN_VALUE;
		}

		Date check_out_chieu = getCheck_out_chieu();

		if (check_out_chieu != null) {
			gioLamCacheModel.check_out_chieu = check_out_chieu.getTime();
		}
		else {
			gioLamCacheModel.check_out_chieu = Long.MIN_VALUE;
		}

		gioLamCacheModel.di_muon_chieu = getDi_muon_chieu();

		gioLamCacheModel.ve_som_chieu = getVe_som_chieu();

		gioLamCacheModel.gio_cham_cong_chieu = getGio_cham_cong_chieu();

		Date check_in_toi = getCheck_in_toi();

		if (check_in_toi != null) {
			gioLamCacheModel.check_in_toi = check_in_toi.getTime();
		}
		else {
			gioLamCacheModel.check_in_toi = Long.MIN_VALUE;
		}

		Date check_out_toi = getCheck_out_toi();

		if (check_out_toi != null) {
			gioLamCacheModel.check_out_toi = check_out_toi.getTime();
		}
		else {
			gioLamCacheModel.check_out_toi = Long.MIN_VALUE;
		}

		gioLamCacheModel.di_muon_toi = getDi_muon_toi();

		gioLamCacheModel.ve_som_toi = getVe_som_toi();

		gioLamCacheModel.diem = getDiem();

		gioLamCacheModel.trangthai = getTrangthai();

		Date created_at = getCreated_at();

		if (created_at != null) {
			gioLamCacheModel.created_at = created_at.getTime();
		}
		else {
			gioLamCacheModel.created_at = Long.MIN_VALUE;
		}

		Date updated_at = getUpdated_at();

		if (updated_at != null) {
			gioLamCacheModel.updated_at = updated_at.getTime();
		}
		else {
			gioLamCacheModel.updated_at = Long.MIN_VALUE;
		}

		return gioLamCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GioLam, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GioLam, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GioLam, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((GioLam)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GioLam, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GioLam, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GioLam, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((GioLam)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GioLam>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					GioLam.class, ModelWrapper.class);

	}

	private int _id;
	private long _user_id;
	private Date _ngay_lam;
	private String _ip;
	private Date _check_in_sang;
	private Date _check_out_sang;
	private int _di_muon_sang;
	private int _ve_som_sang;
	private int _gio_cham_cong_sang;
	private Date _check_in_chieu;
	private Date _check_out_chieu;
	private int _di_muon_chieu;
	private int _ve_som_chieu;
	private int _gio_cham_cong_chieu;
	private Date _check_in_toi;
	private Date _check_out_toi;
	private int _di_muon_toi;
	private int _ve_som_toi;
	private double _diem;
	private int _trangthai;
	private Date _created_at;
	private Date _updated_at;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<GioLam, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((GioLam)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("user_id", _user_id);
		_columnOriginalValues.put("ngay_lam", _ngay_lam);
		_columnOriginalValues.put("ip", _ip);
		_columnOriginalValues.put("check_in_sang", _check_in_sang);
		_columnOriginalValues.put("check_out_sang", _check_out_sang);
		_columnOriginalValues.put("di_muon_sang", _di_muon_sang);
		_columnOriginalValues.put("ve_som_sang", _ve_som_sang);
		_columnOriginalValues.put("gio_cham_cong_sang", _gio_cham_cong_sang);
		_columnOriginalValues.put("check_in_chieu", _check_in_chieu);
		_columnOriginalValues.put("check_out_chieu", _check_out_chieu);
		_columnOriginalValues.put("di_muon_chieu", _di_muon_chieu);
		_columnOriginalValues.put("ve_som_chieu", _ve_som_chieu);
		_columnOriginalValues.put("gio_cham_cong_chieu", _gio_cham_cong_chieu);
		_columnOriginalValues.put("check_in_toi", _check_in_toi);
		_columnOriginalValues.put("check_out_toi", _check_out_toi);
		_columnOriginalValues.put("di_muon_toi", _di_muon_toi);
		_columnOriginalValues.put("ve_som_toi", _ve_som_toi);
		_columnOriginalValues.put("diem", _diem);
		_columnOriginalValues.put("trangthai", _trangthai);
		_columnOriginalValues.put("created_at", _created_at);
		_columnOriginalValues.put("updated_at", _updated_at);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("user_id", 2L);

		columnBitmasks.put("ngay_lam", 4L);

		columnBitmasks.put("ip", 8L);

		columnBitmasks.put("check_in_sang", 16L);

		columnBitmasks.put("check_out_sang", 32L);

		columnBitmasks.put("di_muon_sang", 64L);

		columnBitmasks.put("ve_som_sang", 128L);

		columnBitmasks.put("gio_cham_cong_sang", 256L);

		columnBitmasks.put("check_in_chieu", 512L);

		columnBitmasks.put("check_out_chieu", 1024L);

		columnBitmasks.put("di_muon_chieu", 2048L);

		columnBitmasks.put("ve_som_chieu", 4096L);

		columnBitmasks.put("gio_cham_cong_chieu", 8192L);

		columnBitmasks.put("check_in_toi", 16384L);

		columnBitmasks.put("check_out_toi", 32768L);

		columnBitmasks.put("di_muon_toi", 65536L);

		columnBitmasks.put("ve_som_toi", 131072L);

		columnBitmasks.put("diem", 262144L);

		columnBitmasks.put("trangthai", 524288L);

		columnBitmasks.put("created_at", 1048576L);

		columnBitmasks.put("updated_at", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private GioLam _escapedModel;

}