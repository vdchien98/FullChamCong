/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.chamcong.model.impl;

import com.liferay.docs.chamcong.model.Ngaylamviec;
import com.liferay.docs.chamcong.model.NgaylamviecModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Ngaylamviec service. Represents a row in the &quot;_Ngaylamviec&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NgaylamviecModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NgaylamviecImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NgaylamviecImpl
 * @generated
 */
@JSON(strict = true)
public class NgaylamviecModelImpl
	extends BaseModelImpl<Ngaylamviec> implements NgaylamviecModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ngaylamviec model instance should use the <code>Ngaylamviec</code> interface instead.
	 */
	public static final String TABLE_NAME = "_Ngaylamviec";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.INTEGER}, {"nam", Types.INTEGER},
		{"thang", Types.INTEGER}, {"so_ngay_lam_viec", Types.INTEGER},
		{"trangthai", Types.INTEGER}, {"created_at", Types.TIMESTAMP},
		{"updated_at", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nam", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("thang", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("so_ngay_lam_viec", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trangthai", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("created_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated_at", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table _Ngaylamviec (id_ INTEGER not null primary key,nam INTEGER,thang INTEGER,so_ngay_lam_viec INTEGER,trangthai INTEGER,created_at DATE null,updated_at DATE null)";

	public static final String TABLE_SQL_DROP = "drop table _Ngaylamviec";

	public static final String ORDER_BY_JPQL = " ORDER BY ngaylamviec.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY _Ngaylamviec.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public NgaylamviecModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Ngaylamviec.class;
	}

	@Override
	public String getModelClassName() {
		return Ngaylamviec.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Ngaylamviec, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Ngaylamviec, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ngaylamviec, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Ngaylamviec)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Ngaylamviec, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Ngaylamviec, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Ngaylamviec)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Ngaylamviec, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Ngaylamviec, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Ngaylamviec, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Ngaylamviec, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Ngaylamviec, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Ngaylamviec, Object>>();
		Map<String, BiConsumer<Ngaylamviec, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Ngaylamviec, ?>>();

		attributeGetterFunctions.put("id", Ngaylamviec::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Ngaylamviec, Integer>)Ngaylamviec::setId);
		attributeGetterFunctions.put("nam", Ngaylamviec::getNam);
		attributeSetterBiConsumers.put(
			"nam", (BiConsumer<Ngaylamviec, Integer>)Ngaylamviec::setNam);
		attributeGetterFunctions.put("thang", Ngaylamviec::getThang);
		attributeSetterBiConsumers.put(
			"thang", (BiConsumer<Ngaylamviec, Integer>)Ngaylamviec::setThang);
		attributeGetterFunctions.put(
			"so_ngay_lam_viec", Ngaylamviec::getSo_ngay_lam_viec);
		attributeSetterBiConsumers.put(
			"so_ngay_lam_viec",
			(BiConsumer<Ngaylamviec, Integer>)Ngaylamviec::setSo_ngay_lam_viec);
		attributeGetterFunctions.put("trangthai", Ngaylamviec::getTrangthai);
		attributeSetterBiConsumers.put(
			"trangthai",
			(BiConsumer<Ngaylamviec, Integer>)Ngaylamviec::setTrangthai);
		attributeGetterFunctions.put("created_at", Ngaylamviec::getCreated_at);
		attributeSetterBiConsumers.put(
			"created_at",
			(BiConsumer<Ngaylamviec, Date>)Ngaylamviec::setCreated_at);
		attributeGetterFunctions.put("updated_at", Ngaylamviec::getUpdated_at);
		attributeSetterBiConsumers.put(
			"updated_at",
			(BiConsumer<Ngaylamviec, Date>)Ngaylamviec::setUpdated_at);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalId() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("id_"));
	}

	@JSON
	@Override
	public int getNam() {
		return _nam;
	}

	@Override
	public void setNam(int nam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nam = nam;
	}

	@JSON
	@Override
	public int getThang() {
		return _thang;
	}

	@Override
	public void setThang(int thang) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thang = thang;
	}

	@JSON
	@Override
	public int getSo_ngay_lam_viec() {
		return _so_ngay_lam_viec;
	}

	@Override
	public void setSo_ngay_lam_viec(int so_ngay_lam_viec) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_so_ngay_lam_viec = so_ngay_lam_viec;
	}

	@JSON
	@Override
	public int getTrangthai() {
		return _trangthai;
	}

	@Override
	public void setTrangthai(int trangthai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangthai = trangthai;
	}

	@JSON
	@Override
	public Date getCreated_at() {
		return _created_at;
	}

	@Override
	public void setCreated_at(Date created_at) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_created_at = created_at;
	}

	@JSON
	@Override
	public Date getUpdated_at() {
		return _updated_at;
	}

	@Override
	public void setUpdated_at(Date updated_at) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updated_at = updated_at;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Ngaylamviec toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Ngaylamviec>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NgaylamviecImpl ngaylamviecImpl = new NgaylamviecImpl();

		ngaylamviecImpl.setId(getId());
		ngaylamviecImpl.setNam(getNam());
		ngaylamviecImpl.setThang(getThang());
		ngaylamviecImpl.setSo_ngay_lam_viec(getSo_ngay_lam_viec());
		ngaylamviecImpl.setTrangthai(getTrangthai());
		ngaylamviecImpl.setCreated_at(getCreated_at());
		ngaylamviecImpl.setUpdated_at(getUpdated_at());

		ngaylamviecImpl.resetOriginalValues();

		return ngaylamviecImpl;
	}

	@Override
	public Ngaylamviec cloneWithOriginalValues() {
		NgaylamviecImpl ngaylamviecImpl = new NgaylamviecImpl();

		ngaylamviecImpl.setId(this.<Integer>getColumnOriginalValue("id_"));
		ngaylamviecImpl.setNam(this.<Integer>getColumnOriginalValue("nam"));
		ngaylamviecImpl.setThang(this.<Integer>getColumnOriginalValue("thang"));
		ngaylamviecImpl.setSo_ngay_lam_viec(
			this.<Integer>getColumnOriginalValue("so_ngay_lam_viec"));
		ngaylamviecImpl.setTrangthai(
			this.<Integer>getColumnOriginalValue("trangthai"));
		ngaylamviecImpl.setCreated_at(
			this.<Date>getColumnOriginalValue("created_at"));
		ngaylamviecImpl.setUpdated_at(
			this.<Date>getColumnOriginalValue("updated_at"));

		return ngaylamviecImpl;
	}

	@Override
	public int compareTo(Ngaylamviec ngaylamviec) {
		int primaryKey = ngaylamviec.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Ngaylamviec)) {
			return false;
		}

		Ngaylamviec ngaylamviec = (Ngaylamviec)object;

		int primaryKey = ngaylamviec.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Ngaylamviec> toCacheModel() {
		NgaylamviecCacheModel ngaylamviecCacheModel =
			new NgaylamviecCacheModel();

		ngaylamviecCacheModel.id = getId();

		ngaylamviecCacheModel.nam = getNam();

		ngaylamviecCacheModel.thang = getThang();

		ngaylamviecCacheModel.so_ngay_lam_viec = getSo_ngay_lam_viec();

		ngaylamviecCacheModel.trangthai = getTrangthai();

		Date created_at = getCreated_at();

		if (created_at != null) {
			ngaylamviecCacheModel.created_at = created_at.getTime();
		}
		else {
			ngaylamviecCacheModel.created_at = Long.MIN_VALUE;
		}

		Date updated_at = getUpdated_at();

		if (updated_at != null) {
			ngaylamviecCacheModel.updated_at = updated_at.getTime();
		}
		else {
			ngaylamviecCacheModel.updated_at = Long.MIN_VALUE;
		}

		return ngaylamviecCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Ngaylamviec, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Ngaylamviec, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ngaylamviec, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Ngaylamviec)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Ngaylamviec, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Ngaylamviec, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ngaylamviec, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Ngaylamviec)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Ngaylamviec>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Ngaylamviec.class, ModelWrapper.class);

	}

	private int _id;
	private int _nam;
	private int _thang;
	private int _so_ngay_lam_viec;
	private int _trangthai;
	private Date _created_at;
	private Date _updated_at;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Ngaylamviec, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Ngaylamviec)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("nam", _nam);
		_columnOriginalValues.put("thang", _thang);
		_columnOriginalValues.put("so_ngay_lam_viec", _so_ngay_lam_viec);
		_columnOriginalValues.put("trangthai", _trangthai);
		_columnOriginalValues.put("created_at", _created_at);
		_columnOriginalValues.put("updated_at", _updated_at);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("nam", 2L);

		columnBitmasks.put("thang", 4L);

		columnBitmasks.put("so_ngay_lam_viec", 8L);

		columnBitmasks.put("trangthai", 16L);

		columnBitmasks.put("created_at", 32L);

		columnBitmasks.put("updated_at", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Ngaylamviec _escapedModel;

}