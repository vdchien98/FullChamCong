/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.chamcong.model.impl;

import com.liferay.docs.chamcong.model.Xinnghi;
import com.liferay.docs.chamcong.model.XinnghiModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Xinnghi service. Represents a row in the &quot;_Xinnghi&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>XinnghiModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link XinnghiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see XinnghiImpl
 * @generated
 */
@JSON(strict = true)
public class XinnghiModelImpl
	extends BaseModelImpl<Xinnghi> implements XinnghiModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a xinnghi model instance should use the <code>Xinnghi</code> interface instead.
	 */
	public static final String TABLE_NAME = "_Xinnghi";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.INTEGER}, {"user_id", Types.BIGINT},
		{"tu_ngay", Types.TIMESTAMP}, {"den_ngay", Types.TIMESTAMP},
		{"ly_do", Types.VARCHAR}, {"chon_ly_do", Types.VARCHAR},
		{"trangthai", Types.INTEGER}, {"nua_ngay", Types.INTEGER},
		{"so_ngay", Types.INTEGER}, {"file_url", Types.VARCHAR},
		{"nguoi_huy", Types.BIGINT}, {"created_at", Types.TIMESTAMP},
		{"updated_at", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tu_ngay", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("den_ngay", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ly_do", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("chon_ly_do", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trangthai", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nua_ngay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("so_ngay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("file_url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nguoi_huy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("created_at", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("updated_at", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table _Xinnghi (id_ INTEGER not null primary key,user_id LONG,tu_ngay DATE null,den_ngay DATE null,ly_do TEXT null,chon_ly_do VARCHAR(75) null,trangthai INTEGER,nua_ngay INTEGER,so_ngay INTEGER,file_url VARCHAR(75) null,nguoi_huy LONG,created_at DATE null,updated_at DATE null)";

	public static final String TABLE_SQL_DROP = "drop table _Xinnghi";

	public static final String ORDER_BY_JPQL = " ORDER BY xinnghi.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY _Xinnghi.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public XinnghiModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Xinnghi.class;
	}

	@Override
	public String getModelClassName() {
		return Xinnghi.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Xinnghi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Xinnghi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Xinnghi, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Xinnghi)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Xinnghi, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Xinnghi, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Xinnghi)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Xinnghi, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Xinnghi, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Xinnghi, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Xinnghi, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Xinnghi, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Xinnghi, Object>>();
		Map<String, BiConsumer<Xinnghi, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Xinnghi, ?>>();

		attributeGetterFunctions.put("id", Xinnghi::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Xinnghi, Integer>)Xinnghi::setId);
		attributeGetterFunctions.put("user_id", Xinnghi::getUser_id);
		attributeSetterBiConsumers.put(
			"user_id", (BiConsumer<Xinnghi, Long>)Xinnghi::setUser_id);
		attributeGetterFunctions.put("tu_ngay", Xinnghi::getTu_ngay);
		attributeSetterBiConsumers.put(
			"tu_ngay", (BiConsumer<Xinnghi, Date>)Xinnghi::setTu_ngay);
		attributeGetterFunctions.put("den_ngay", Xinnghi::getDen_ngay);
		attributeSetterBiConsumers.put(
			"den_ngay", (BiConsumer<Xinnghi, Date>)Xinnghi::setDen_ngay);
		attributeGetterFunctions.put("ly_do", Xinnghi::getLy_do);
		attributeSetterBiConsumers.put(
			"ly_do", (BiConsumer<Xinnghi, String>)Xinnghi::setLy_do);
		attributeGetterFunctions.put("chon_ly_do", Xinnghi::getChon_ly_do);
		attributeSetterBiConsumers.put(
			"chon_ly_do", (BiConsumer<Xinnghi, String>)Xinnghi::setChon_ly_do);
		attributeGetterFunctions.put("trangthai", Xinnghi::getTrangthai);
		attributeSetterBiConsumers.put(
			"trangthai", (BiConsumer<Xinnghi, Integer>)Xinnghi::setTrangthai);
		attributeGetterFunctions.put("nua_ngay", Xinnghi::getNua_ngay);
		attributeSetterBiConsumers.put(
			"nua_ngay", (BiConsumer<Xinnghi, Integer>)Xinnghi::setNua_ngay);
		attributeGetterFunctions.put("so_ngay", Xinnghi::getSo_ngay);
		attributeSetterBiConsumers.put(
			"so_ngay", (BiConsumer<Xinnghi, Integer>)Xinnghi::setSo_ngay);
		attributeGetterFunctions.put("file_url", Xinnghi::getFile_url);
		attributeSetterBiConsumers.put(
			"file_url", (BiConsumer<Xinnghi, String>)Xinnghi::setFile_url);
		attributeGetterFunctions.put("nguoi_huy", Xinnghi::getNguoi_huy);
		attributeSetterBiConsumers.put(
			"nguoi_huy", (BiConsumer<Xinnghi, Long>)Xinnghi::setNguoi_huy);
		attributeGetterFunctions.put("created_at", Xinnghi::getCreated_at);
		attributeSetterBiConsumers.put(
			"created_at", (BiConsumer<Xinnghi, Date>)Xinnghi::setCreated_at);
		attributeGetterFunctions.put("updated_at", Xinnghi::getUpdated_at);
		attributeSetterBiConsumers.put(
			"updated_at", (BiConsumer<Xinnghi, Date>)Xinnghi::setUpdated_at);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalId() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("id_"));
	}

	@JSON
	@Override
	public long getUser_id() {
		return _user_id;
	}

	@Override
	public void setUser_id(long user_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_user_id = user_id;
	}

	@JSON
	@Override
	public Date getTu_ngay() {
		return _tu_ngay;
	}

	@Override
	public void setTu_ngay(Date tu_ngay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tu_ngay = tu_ngay;
	}

	@JSON
	@Override
	public Date getDen_ngay() {
		return _den_ngay;
	}

	@Override
	public void setDen_ngay(Date den_ngay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_den_ngay = den_ngay;
	}

	@JSON
	@Override
	public String getLy_do() {
		if (_ly_do == null) {
			return "";
		}
		else {
			return _ly_do;
		}
	}

	@Override
	public void setLy_do(String ly_do) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ly_do = ly_do;
	}

	@JSON
	@Override
	public String getChon_ly_do() {
		if (_chon_ly_do == null) {
			return "";
		}
		else {
			return _chon_ly_do;
		}
	}

	@Override
	public void setChon_ly_do(String chon_ly_do) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_chon_ly_do = chon_ly_do;
	}

	@JSON
	@Override
	public int getTrangthai() {
		return _trangthai;
	}

	@Override
	public void setTrangthai(int trangthai) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trangthai = trangthai;
	}

	@JSON
	@Override
	public int getNua_ngay() {
		return _nua_ngay;
	}

	@Override
	public void setNua_ngay(int nua_ngay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nua_ngay = nua_ngay;
	}

	@JSON
	@Override
	public int getSo_ngay() {
		return _so_ngay;
	}

	@Override
	public void setSo_ngay(int so_ngay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_so_ngay = so_ngay;
	}

	@JSON
	@Override
	public String getFile_url() {
		if (_file_url == null) {
			return "";
		}
		else {
			return _file_url;
		}
	}

	@Override
	public void setFile_url(String file_url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_file_url = file_url;
	}

	@JSON
	@Override
	public long getNguoi_huy() {
		return _nguoi_huy;
	}

	@Override
	public void setNguoi_huy(long nguoi_huy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nguoi_huy = nguoi_huy;
	}

	@JSON
	@Override
	public Date getCreated_at() {
		return _created_at;
	}

	@Override
	public void setCreated_at(Date created_at) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_created_at = created_at;
	}

	@JSON
	@Override
	public Date getUpdated_at() {
		return _updated_at;
	}

	@Override
	public void setUpdated_at(Date updated_at) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_updated_at = updated_at;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Xinnghi toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Xinnghi>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		XinnghiImpl xinnghiImpl = new XinnghiImpl();

		xinnghiImpl.setId(getId());
		xinnghiImpl.setUser_id(getUser_id());
		xinnghiImpl.setTu_ngay(getTu_ngay());
		xinnghiImpl.setDen_ngay(getDen_ngay());
		xinnghiImpl.setLy_do(getLy_do());
		xinnghiImpl.setChon_ly_do(getChon_ly_do());
		xinnghiImpl.setTrangthai(getTrangthai());
		xinnghiImpl.setNua_ngay(getNua_ngay());
		xinnghiImpl.setSo_ngay(getSo_ngay());
		xinnghiImpl.setFile_url(getFile_url());
		xinnghiImpl.setNguoi_huy(getNguoi_huy());
		xinnghiImpl.setCreated_at(getCreated_at());
		xinnghiImpl.setUpdated_at(getUpdated_at());

		xinnghiImpl.resetOriginalValues();

		return xinnghiImpl;
	}

	@Override
	public Xinnghi cloneWithOriginalValues() {
		XinnghiImpl xinnghiImpl = new XinnghiImpl();

		xinnghiImpl.setId(this.<Integer>getColumnOriginalValue("id_"));
		xinnghiImpl.setUser_id(this.<Long>getColumnOriginalValue("user_id"));
		xinnghiImpl.setTu_ngay(this.<Date>getColumnOriginalValue("tu_ngay"));
		xinnghiImpl.setDen_ngay(this.<Date>getColumnOriginalValue("den_ngay"));
		xinnghiImpl.setLy_do(this.<String>getColumnOriginalValue("ly_do"));
		xinnghiImpl.setChon_ly_do(
			this.<String>getColumnOriginalValue("chon_ly_do"));
		xinnghiImpl.setTrangthai(
			this.<Integer>getColumnOriginalValue("trangthai"));
		xinnghiImpl.setNua_ngay(
			this.<Integer>getColumnOriginalValue("nua_ngay"));
		xinnghiImpl.setSo_ngay(this.<Integer>getColumnOriginalValue("so_ngay"));
		xinnghiImpl.setFile_url(
			this.<String>getColumnOriginalValue("file_url"));
		xinnghiImpl.setNguoi_huy(
			this.<Long>getColumnOriginalValue("nguoi_huy"));
		xinnghiImpl.setCreated_at(
			this.<Date>getColumnOriginalValue("created_at"));
		xinnghiImpl.setUpdated_at(
			this.<Date>getColumnOriginalValue("updated_at"));

		return xinnghiImpl;
	}

	@Override
	public int compareTo(Xinnghi xinnghi) {
		int primaryKey = xinnghi.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Xinnghi)) {
			return false;
		}

		Xinnghi xinnghi = (Xinnghi)object;

		int primaryKey = xinnghi.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Xinnghi> toCacheModel() {
		XinnghiCacheModel xinnghiCacheModel = new XinnghiCacheModel();

		xinnghiCacheModel.id = getId();

		xinnghiCacheModel.user_id = getUser_id();

		Date tu_ngay = getTu_ngay();

		if (tu_ngay != null) {
			xinnghiCacheModel.tu_ngay = tu_ngay.getTime();
		}
		else {
			xinnghiCacheModel.tu_ngay = Long.MIN_VALUE;
		}

		Date den_ngay = getDen_ngay();

		if (den_ngay != null) {
			xinnghiCacheModel.den_ngay = den_ngay.getTime();
		}
		else {
			xinnghiCacheModel.den_ngay = Long.MIN_VALUE;
		}

		xinnghiCacheModel.ly_do = getLy_do();

		String ly_do = xinnghiCacheModel.ly_do;

		if ((ly_do != null) && (ly_do.length() == 0)) {
			xinnghiCacheModel.ly_do = null;
		}

		xinnghiCacheModel.chon_ly_do = getChon_ly_do();

		String chon_ly_do = xinnghiCacheModel.chon_ly_do;

		if ((chon_ly_do != null) && (chon_ly_do.length() == 0)) {
			xinnghiCacheModel.chon_ly_do = null;
		}

		xinnghiCacheModel.trangthai = getTrangthai();

		xinnghiCacheModel.nua_ngay = getNua_ngay();

		xinnghiCacheModel.so_ngay = getSo_ngay();

		xinnghiCacheModel.file_url = getFile_url();

		String file_url = xinnghiCacheModel.file_url;

		if ((file_url != null) && (file_url.length() == 0)) {
			xinnghiCacheModel.file_url = null;
		}

		xinnghiCacheModel.nguoi_huy = getNguoi_huy();

		Date created_at = getCreated_at();

		if (created_at != null) {
			xinnghiCacheModel.created_at = created_at.getTime();
		}
		else {
			xinnghiCacheModel.created_at = Long.MIN_VALUE;
		}

		Date updated_at = getUpdated_at();

		if (updated_at != null) {
			xinnghiCacheModel.updated_at = updated_at.getTime();
		}
		else {
			xinnghiCacheModel.updated_at = Long.MIN_VALUE;
		}

		return xinnghiCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Xinnghi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Xinnghi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Xinnghi, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Xinnghi)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Xinnghi, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Xinnghi, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Xinnghi, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Xinnghi)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Xinnghi>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Xinnghi.class, ModelWrapper.class);

	}

	private int _id;
	private long _user_id;
	private Date _tu_ngay;
	private Date _den_ngay;
	private String _ly_do;
	private String _chon_ly_do;
	private int _trangthai;
	private int _nua_ngay;
	private int _so_ngay;
	private String _file_url;
	private long _nguoi_huy;
	private Date _created_at;
	private Date _updated_at;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Xinnghi, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Xinnghi)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("user_id", _user_id);
		_columnOriginalValues.put("tu_ngay", _tu_ngay);
		_columnOriginalValues.put("den_ngay", _den_ngay);
		_columnOriginalValues.put("ly_do", _ly_do);
		_columnOriginalValues.put("chon_ly_do", _chon_ly_do);
		_columnOriginalValues.put("trangthai", _trangthai);
		_columnOriginalValues.put("nua_ngay", _nua_ngay);
		_columnOriginalValues.put("so_ngay", _so_ngay);
		_columnOriginalValues.put("file_url", _file_url);
		_columnOriginalValues.put("nguoi_huy", _nguoi_huy);
		_columnOriginalValues.put("created_at", _created_at);
		_columnOriginalValues.put("updated_at", _updated_at);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("user_id", 2L);

		columnBitmasks.put("tu_ngay", 4L);

		columnBitmasks.put("den_ngay", 8L);

		columnBitmasks.put("ly_do", 16L);

		columnBitmasks.put("chon_ly_do", 32L);

		columnBitmasks.put("trangthai", 64L);

		columnBitmasks.put("nua_ngay", 128L);

		columnBitmasks.put("so_ngay", 256L);

		columnBitmasks.put("file_url", 512L);

		columnBitmasks.put("nguoi_huy", 1024L);

		columnBitmasks.put("created_at", 2048L);

		columnBitmasks.put("updated_at", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Xinnghi _escapedModel;

}